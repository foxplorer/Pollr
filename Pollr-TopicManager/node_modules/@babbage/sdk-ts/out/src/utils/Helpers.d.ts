import { Script, Transaction } from "@bsv/sdk";
export declare function asBuffer(val: Buffer | string | number[], encoding?: BufferEncoding): Buffer;
/**
 * @param val Value to convert to encoded string if not already a string.
 * @param encoding
 */
export declare function asString(val: Buffer | string, encoding?: BufferEncoding): string;
export declare function asArray(val: Buffer | string | number[], encoding?: BufferEncoding): number[];
/**
 * Calculate the SHA256 hash of a Buffer.
 * @returns sha256 hash of buffer contents.
 * @publicbody
 */
export declare function sha256Hash(buffer: Buffer): Buffer;
/**
 * Calculate the SHA256 hash of the SHA256 hash of a Buffer.
 * @param data is Buffer or hex encoded string
 * @returns double sha256 hash of buffer contents, byte 0 of hash first.
 * @publicbody
 */
export declare function doubleSha256HashLE(data: string | Buffer, encoding?: BufferEncoding): Buffer;
/**
 * Calculate the SHA256 hash of the SHA256 hash of a Buffer.
 * @param data is Buffer or hex encoded string
 * @returns reversed (big-endian) double sha256 hash of data, byte 31 of hash first.
 * @publicbody
 */
export declare function doubleSha256BE(data: string | Buffer, encoding?: BufferEncoding): Buffer;
export declare function verifyTruthy<T>(v: T | null | undefined, description?: string): T;
export declare function asBsvSdkScript(script: string | Buffer | Script): Script;
export declare function asBsvSdkTx(tx: string | Buffer | Transaction): Transaction;
//# sourceMappingURL=Helpers.d.ts.map