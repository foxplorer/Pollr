"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildTransactionForSignActionUnlocking = buildTransactionForSignActionUnlocking;
const sdk_1 = require("@bsv/sdk");
const Helpers_1 = require("./Helpers");
/**
 * Constructs a @bsv/sdk `Transaction` from Ninja inputs and Dojo create transaction results.
 *
 * @param ninjaInputs Ninja inputs as passed to createAction
 * @param createResult Create transaction results returned by createAction when signActionRequires is true.
 * @param changeKeys Dummy keys can be used to create a transaction with which to generate Ninja input lockingScripts.
 */
async function buildTransactionForSignActionUnlocking(ninjaInputs, createResult) {
    var _a;
    const { inputs: dojoInputs, outputs: dojoOutputs, derivationPrefix, version, lockTime, } = createResult;
    const tx = new sdk_1.Transaction(version, [], [], lockTime);
    //////////////
    // Add OUTPUTS
    /////////////
    for (const [i, out] of dojoOutputs.entries()) {
        let output;
        output = {
            satoshis: out.satoshis,
            lockingScript: (0, Helpers_1.asBsvSdkScript)(out.script),
            change: false
        };
        tx.addOutput(output);
    }
    const getIndex = (o) => {
        if (typeof o === 'object') {
            return o.index;
        }
        else {
            return o;
        }
    };
    //////////////
    // Add INPUTS
    /////////////
    let vin = -1;
    for (const [inputTXID, input] of Object.entries(dojoInputs)) {
        // For each transaction supplying inputs...
        const txInput = (0, Helpers_1.asBsvSdkTx)(input.rawTx); // transaction referenced by input "outpoint" (txid,vout)
        if (txInput.id("hex") !== inputTXID)
            throw new Error(`rawTx must match txid. Hash of rawTx is not equal to input txid ${inputTXID}`);
        for (const otr of input.outputsToRedeem) {
            vin++;
            // For each output being redeemed from that input transaction
            const otrIndex = getIndex(otr);
            const otrOutput = txInput.outputs[otrIndex]; // the bitcoin transaction output being spent by new transaction
            // Find this input in ninjaInputs to find if an already signed unlocking script was provided.
            const otrNinja = (_a = ninjaInputs[inputTXID]) === null || _a === void 0 ? void 0 : _a.outputsToRedeem.find(x => x.index === otrIndex);
            // Three types of inputs are handled:
            // Type0: Locking script will be inserted by caller before calling sign, numeric otrNinja.unlockingScript value
            // Type1: An already signed unlock script is provided as a hex string in otrNinja.unlockingScript
            // Type2: SABPPP protocol inputs which will be signed later by signAction
            // 
            if (typeof (otrNinja === null || otrNinja === void 0 ? void 0 : otrNinja.unlockingScript) === 'number') {
                // Type0
                const inputToAdd = {
                    sourceTransaction: txInput,
                    sourceTXID: inputTXID,
                    sourceOutputIndex: otrIndex,
                    sequence: otrNinja.sequenceNumber || 0xffffffff
                };
                tx.addInput(inputToAdd);
            }
            else if (typeof (otrNinja === null || otrNinja === void 0 ? void 0 : otrNinja.unlockingScript) === 'string') {
                // Type1
                const inputToAdd = {
                    sourceTransaction: txInput,
                    sourceTXID: inputTXID,
                    sourceOutputIndex: otrIndex,
                    unlockingScript: (0, Helpers_1.asBsvSdkScript)(otrNinja.unlockingScript),
                    sequence: otrNinja.sequenceNumber || 0xffffffff
                };
                tx.addInput(inputToAdd);
            }
            else if (!otrNinja) {
                // Type2
                const inputToAdd = {
                    sourceTransaction: txInput,
                    sourceTXID: inputTXID,
                    sourceOutputIndex: otrIndex,
                    sequence: 0xffffffff
                };
                tx.addInput(inputToAdd);
            }
            else {
                throw new Error(`unhandled input type ${vin}`);
            }
        }
    }
    return tx;
}
//# sourceMappingURL=buildTransactionForSignActionUnlocking.js.map