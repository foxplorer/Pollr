"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerifiableCertificate = void 0;
const mod_js_1 = require("../../../mod.js");
const Certificate_js_1 = __importDefault(require("./Certificate.js"));
/**
 * VerifiableCertificate extends the Certificate class, adding functionality to manage a verifier-specific keyring.
 * This keyring allows selective decryption of certificate fields for authorized verifiers.
 */
class VerifiableCertificate extends Certificate_js_1.default {
    constructor(type, serialNumber, subject, certifier, revocationOutpoint, fields, keyring, signature, decryptedFields) {
        super(type, serialNumber, subject, certifier, revocationOutpoint, fields, signature);
        this.keyring = keyring;
        this.decryptedFields = decryptedFields;
    }
    /**
     * Decrypts selectively revealed certificate fields using the provided keyring and verifier wallet
     * @param {ProtoWallet} verifierWallet - The wallet instance of the certificate's verifier, used to decrypt field keys.
     * @returns {Promise<Record<CertificateFieldNameUnder50Bytes, string>>} - A promise that resolves to an object where each key is a field name and each value is the decrypted field value as a string.
     * @param {BooleanDefaultFalse} [privileged] - Whether this is a privileged request.
     * @param {DescriptionString5to50Bytes} [privilegedReason] - Reason provided for privileged access, required if this is a privileged operation.
     * @throws {Error} Throws an error if any of the decryption operations fail, with a message indicating the failure context.
     */
    async decryptFields(verifierWallet, privileged, privilegedReason) {
        if (this.keyring == null || Object.keys(this.keyring).length === 0) { // âœ… Explicitly check null and empty object
            throw new Error('A keyring is required to decrypt certificate fields for the verifier.');
        }
        try {
            const decryptedFields = {};
            for (const fieldName in this.keyring) {
                const { plaintext: fieldRevelationKey } = await verifierWallet.decrypt({
                    ciphertext: mod_js_1.Utils.toArray(this.keyring[fieldName], 'base64'),
                    ...Certificate_js_1.default.getCertificateFieldEncryptionDetails(fieldName, this.serialNumber),
                    counterparty: this.subject,
                    privileged,
                    privilegedReason
                });
                const fieldValue = new mod_js_1.SymmetricKey(fieldRevelationKey).decrypt(mod_js_1.Utils.toArray(this.fields[fieldName], 'base64'));
                decryptedFields[fieldName] = mod_js_1.Utils.toUTF8(fieldValue);
            }
            return decryptedFields;
        }
        catch (error) {
            throw new Error(`Failed to decrypt selectively revealed certificate fields using keyring: ${String(error instanceof Error ? error.message : error)}`);
        }
    }
}
exports.VerifiableCertificate = VerifiableCertificate;
//# sourceMappingURL=VerifiableCertificate.js.map